/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/markdowntext/main.js":
/*!*************************************!*\
  !*** ./client/markdowntext/main.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { createCustomDropdowns, fixIframes } = __webpack_require__(/*! ../utils.js */ \"./client/utils.js\");\n\nfixIframes();\ncreateCustomDropdowns();\n\nconst targetNode = document.querySelector(\"#textarea\");\n\n\nconst validElements = [\n    {\n        tag: \"b\",\n        attributes: []\n    },\n    {\n        tag: \"i\",\n        attributes: []\n    },\n    {\n        tag: \"u\",\n        attributes: []\n    }\n];\n\nwindow.validElements = validElements;\n\nconst observer = new MutationObserver((list, observer) => {\n\n    const els = [...targetNode.children];\n    els.forEach(el => {\n        const [entry] = validElements.filter(e=>e.tag==el.tagName.toLowerCase());\n\n        console.log(entry);\n        \n        //Check if element is valid\n        if(entry || !el.tagName) {\n\n            //Remove attributes that aren't in the list\n            el.getAttributeNames().forEach(attr => {\n                if(!entry.attributes.includes(attr)) {\n                    el.removeAttribute(attr);\n                }\n            })\n        } else {\n            el.remove();\n        }\n    });\n})\n\nobserver.observe(targetNode, {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true\n});\n\n//# sourceURL=webpack://arlosmod/./client/markdowntext/main.js?");

/***/ }),

/***/ "./client/utils.js":
/*!*************************!*\
  !*** ./client/utils.js ***!
  \*************************/
/***/ ((module) => {

eval("\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction getSearchQuery() {\n    let values = {};\n    window.location.search.replace(/\\?/g,\"\").split(\"&\").forEach(elem => {\n        let props = elem.split(\"=\");\n        let key = props.splice(0,1)[0];\n        let value = props.join(\"=\");\n        values[key] = value;\n    });\n    return values;\n}\n\nfunction mod(a,n) {\n    return (( a % n ) + n ) % n\n}\nfunction parseTime(timeString) {\n    let date = new Date(timeString);\n\n    let year = date.getFullYear();\n    let month = date.toLocaleString(\"default\", {month:\"short\"});\n    let day = date.getDate();\n    let dayName = date.toLocaleString(\"default\", {weekday: \"short\"});\n    let fullDayName = date.toLocaleString(\"default\", {weekday: \"long\"});\n\n    let hour = mod(date.getHours() - 1, 12) + 1;\n    let minute = date.getMinutes();\n    let ms = date.getTime();\n\n    let meridian = date.getHours() > 11 ? \"PM\" : \"AM\";\n    let humanTime = `${hour}:${(minute+\"\").padStart(2,\"0\")} ${meridian}`\n\n    hour = mod(hour-1,12)+1;\n\n    if(Date.now() - ms < 60000) {\n        \n        // Show \"a few seconds ago\" if less than 1 mins ago\n        return \"A few seconds ago\";\n\n    } else if(Date.now() - ms < 3600000) {\n\n        // Show \"x mins ago\" if less than an hour ago\n        return Math.round((Date.now() - ms) / (60000)) + \" mins ago\";\n\n    } else if(Math.floor((Date.now()-21600000)/86400000) - Math.floor((ms-21600000)/86400000) == 0) {\n\n        // Show \"today at xx:xx XX\" if message was sent today\n        return `Today at ${humanTime}`;\n\n    } else if(Math.floor((Date.now()-21600000)/86400000) - Math.floor((ms-21600000)/86400000) == 1) {\n\n        // Show \"yesterday at xx:xx XX\" if message was sent yesterday\n        return `Yesterday at ${humanTime}`;\n\n    } else if(Math.floor((Date.now()-21600000)/604800000) - Math.floor((ms-21600000)/604800000) == 0) {\n\n        // Show \"day at xx:xx XX\" if message was sent in the past week\n        return `${fullDayName} at ${humanTime}`;\n\n    } else {\n\n        // Show \"xx/xx/xxxx at xx:xx XX\" if message was sent over a week ago\n        return `${month}/${day}/${year} at ${humanTime}`\n\n    }\n\n    return `${month} ${day}, ${hour}:${minute} ${meridian}`;\n}\n\nfunction convertDifficultyToString(number) {\n    switch(number) {\n        case 0:\n            return \"Novice\";\n        case 1:\n            return \"Easy\";\n        case 2:\n            return \"Normal\";\n        case 3:\n            return \"Hard\";\n        case 4:\n            return \"Expert\";\n        case 5:\n            return \"Insane\";\n        case 6:\n            return \"Demon\";\n        default:\n            return \"NA\";\n    }\n}\nfunction convertDifficultyToImagePath(number) {\n    switch(number) {\n        case 0:\n            return \"/assets/difficulty-ratings/novice.png\";\n        case 1:\n            return \"/assets/difficulty-ratings/easy.png\";\n        case 2:\n            return \"/assets/difficulty-ratings/normal.png\";\n        case 3:\n            return \"/assets/difficulty-ratings/hard.png\";\n        case 4:\n            return \"/assets/difficulty-ratings/expert.png\";\n        case 5:\n            return \"/assets/difficulty-ratings/insane.png\";\n        case 6:\n            return \"/assets/difficulty-ratings/demon.png\";\n        default:\n            return \"/assets/difficulty-ratings/not-applicable.png\";\n    }\n}\n\nfunction createCustomDropdowns() {\n    let dropdowns = document.querySelectorAll(\".dropdown\");\n\n    [...dropdowns].forEach(el => {\n        let optionsObject = [];\n        let selectedOption = null;\n        \n        let options = [...el.querySelectorAll(\"option\")];\n\n        let optionsList = document.createElement(\"div\");\n        \n        options.forEach(option => {\n            let el = document.createElement(\"div\");\n            el.innerHTML = option.innerHTML;\n            el.value = option.value;\n            el.name = option.name;\n\n            el.classList.add(\"dropdown-option\");\n            optionsList.appendChild(el);\n\n            const entry = {\n                text: option.innerHTML,\n                value: option.value,\n                name: option.name,\n                element: el\n            };\n            optionsObject.push(entry)\n            option.remove();\n\n            el.addEventListener(\"click\", e => {\n                toggleOpen();\n                selectOption(entry);\n            })\n        })\n\n        el.innerHTML = `<div class=\"selected\"></div>`;\n\n        const selectOption = (option) => {\n            el.querySelector(\".selected\").innerHTML = option.text;\n            selectedOption = option;\n        }\n        const resize = () => {\n            let rect = el.getBoundingClientRect();\n            \n            optionsList.style.position = \"absolute\";\n            optionsList.style.left = rect.left + \"px\";\n            optionsList.style.top = rect.bottom + \"px\";\n            optionsList.style.width = (rect.right - rect.left) + \"px\";\n            optionsList.style.overflowX = \"hidden\";\n        }\n        const toggleOpen = () => {\n            resize();\n            \n            open = !open;\n            el.dataset.open = open;\n        }\n\n        resize();\n        selectOption(optionsObject[0]);\n\n        optionsList.classList.add(\"options\");\n\n        let open = false;\n        el.querySelector(\".selected\").addEventListener(\"click\", toggleOpen)\n        el.dataset.open = false;\n        \n        el.appendChild(optionsList);\n    });\n}\n\nfunction fixIframes() {\n    const f = () => {\n        const iframes = document.querySelectorAll(\"iframe\");\n        [...iframes].forEach(frame => {\n            const size = frame.getBoundingClientRect();\n            frame.width = size.right - size.left;\n            frame.height = size.bottom - size.top;\n        })\n    }\n    window.addEventListener(\"resize\", f);\n    f();\n}\n\nfunction cloneNode(template) {\n    if(typeof template == \"string\") template = document.querySelector(template);\n    \n    const el = template.content.cloneNode(true);\n    const a = document.createElement(\"div\");\n    a.appendChild(el);\n    return a.children[0];\n}\n\nfunction stringifyMarkdown(element) {\n    \n}\nfunction parseMarkdown(text) {\n    let bold = false;\n    let italic = false;\n    let underlined = false;\n    let boldItalic = false;\n\n    const element = document.createElement(\"div\");\n    let currentBlock = document.createElement(\"span\");\n    let currentText = \"\";\n    \n    const finishBlock = () => {\n        if(currentText == \"\") return;\n\n        \n        if(bold || boldItalic) currentBlock.classList.add(\"bold\");\n        if(italic || boldItalic) currentBlock.classList.add(\"italic\");\n        if(underlined) currentBlock.classList.add(\"underlined\");\n\n        currentBlock.innerText = currentText;\n        currentText = \"\";\n        \n        element.appendChild(currentBlock);\n        currentBlock = document.createElement(\"span\");\n    }\n\n    for(let i = 0; i < text.length; i++) {\n        const currentChar = text[i] ?? \"\";\n        const lastChar = text[i-1] ?? \"\";\n        const nextChar = text[i+1] ?? \"\";\n\n        if(lastChar != \"\\\\\") {\n            if(lastChar == \"*\" && currentChar == \"*\" && nextChar == \"*\") {\n                finishBlock();\n                boldItalic = !boldItalic;\n    \n                continue;\n            }\n            \n            if(lastChar != \"*\" && currentChar == \"*\" && nextChar != \"*\") {\n                finishBlock();\n                italic = !italic;\n    \n                continue;\n            }\n            \n            if(lastChar != \"*\" && currentChar == \"*\" && nextChar == \"*\") {\n                continue;\n            }\n            if(lastChar == \"*\" && currentChar == \"*\" && nextChar != \"*\") {\n                finishBlock();\n                bold = !bold;\n    \n                continue;\n            }\n            \n            if(lastChar != \"_\" && currentChar == \"_\" && nextChar != \"_\") {\n                finishBlock();\n                italic = !italic;\n    \n                continue;\n            }\n            \n            if(lastChar != \"_\" && currentChar == \"_\" && nextChar == \"_\") {\n                continue;\n            }\n            if(lastChar == \"_\" && currentChar == \"_\" && nextChar != \"_\") {\n                finishBlock();\n                underlined = !underlined;\n    \n                continue;\n            }\n        }\n        \n        currentText += currentChar;\n    }\n\n    finishBlock();\n\n    return element;\n}\n\n//Automatically executes\n{\n    function setupFadeTransition() {\n        if(document.querySelector(\"#transition-fade\")) return;\n        \n        const cascadeWall = document.createElement(\"div\");\n        cascadeWall.setAttribute(\"id\", \"transition-fade\");\n        document.body.insertBefore(cascadeWall, document.body.children[0]);\n    }\n    function fadeToBlack() {\n        document.querySelector(\"#transition-fade\")?.classList.add(\"activate\");\n    }\n    \n    setupFadeTransition();\n    [...document.querySelectorAll(\"a\")].forEach(el => {\n        el.addEventListener(\"click\", fadeToBlack);\n    })\n}\n\nmodule.exports = {\n    capitalizeFirstLetter, \n    getSearchQuery, \n    mod, \n    parseTime, \n    convertDifficultyToString, \n    convertDifficultyToImagePath, \n    createCustomDropdowns,\n    fixIframes,\n    cloneNode,\n    parseMarkdown,\n    stringifyMarkdown\n};\n\n//# sourceURL=webpack://arlosmod/./client/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/markdowntext/main.js");
/******/ 	
/******/ })()
;
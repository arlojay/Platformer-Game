/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/account/main.js":
/*!********************************!*\
  !*** ./client/account/main.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const checkRegistration = __webpack_require__(/*! ../../common/registration-checker.js */ \"./common/registration-checker.js\");\nconst cookies = __webpack_require__(/*! js-cookie */ \"./node_modules/js-cookie/dist/js.cookie.js\");\nconst { getAccountData, parseTime } = __webpack_require__(/*! ../utils.js */ \"./client/utils.js\");\n\nconst login = document.querySelector(\"#login-form\");\nconst register = document.querySelector(\"#register-form\");\nconst profile = document.querySelector(\"#profile-content\");\n\nlet account = null;\n\nasync function start() {\n    account = await getAccountData();\n    console.log(account);\n\n    if (account != null) onLoggedIn();\n    else clickLoginTab();\n}\n\nasync function onLoggedIn() {\n    document.querySelector(\"#login-tab\").disabled = true;\n    document.querySelector(\"#register-tab\").disabled = true;\n    document.querySelector(\"#profile-tab\").disabled = false;\n\n    profile.querySelector(\".username\").innerText = account.username;\n    profile.querySelector(\".email\").innerText = account.email;\n    profile.querySelector(\".creation-date\").innerText = parseTime(account.creationDate);\n    profile.querySelector(\".id\").innerText = account.id;\n\n    clickProfileTab();\n}\n\nasync function tryRegister() {\n\n    const username = register.querySelector(\"input.username\").value;\n    const password = register.querySelector(\"input.password\").value;\n    const passwordConfirm = register.querySelector(\"input.password-confirm\").value;\n    const email = register.querySelector(\"input.email\").value;\n\n    checkRegistration(username, password, passwordConfirm, email);\n\n    const body = { username, password, passwordConfirm, email };\n\n    const request = await fetch(\"/register\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });\n\n    const response = await request.json();\n\n    console.log(\"response from registration: \", response);\n\n    if (response.type == \"error\") throw response.message;\n    return response;\n}\n\nasync function tryLogin() {\n\n    const username = login.querySelector(\"input.username\").value;\n    const password = login.querySelector(\"input.password\").value;\n\n    const body = { username, password };\n\n    const request = await fetch(\"/login\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    });\n\n    const response = await request.json();\n\n    console.log(\"response from logging in: \", response);\n\n    if (response.type == \"error\") throw response.message;\n    return response;\n}\n\nregister.addEventListener(\"submit\", async e => {\n    e.preventDefault();\n\n    register.querySelector(\"input[type=\\\"submit\\\"]\").disabled = true;\n\n    try {\n        register.querySelectorAll(\".error\").forEach(child => {\n            child.innerHTML = \"\";\n        })\n        let response = await tryRegister();\n\n        cookies.set(\"token\", response.token);\n        account = response;\n        onLoggedIn();\n    } catch (err) {\n        register.querySelector(\"input[type=\\\"submit\\\"]\").disabled = false;\n\n        if (!(err instanceof Array)) {\n            register.querySelector(\".error\").innerText = err.message ?? err;\n            return;\n        }\n\n        const [element, message] = err;\n\n        register.querySelector(\".error.\" + element).innerText = message;\n    }\n\n})\n\nlogin.addEventListener(\"submit\", async e => {\n    e.preventDefault();\n\n    login.querySelector(\"input[type=\\\"submit\\\"]\").disabled = true;\n\n    try {\n        login.querySelectorAll(\".error\").forEach(child => {\n            child.innerHTML = \"\";\n        })\n        let response = await tryLogin();\n\n        cookies.set(\"token\", response.token);\n        account = response;\n        onLoggedIn();\n    } catch (err) {\n        login.querySelector(\"input[type=\\\"submit\\\"]\").disabled = false;\n\n        if (!(err instanceof Array)) {\n            login.querySelector(\".error\").innerText = err.message ?? err;\n            return;\n        }\n\n        const [element, message] = err;\n\n        const selector = \".error.\" + element;\n        login.querySelector(selector).innerText = message;\n    }\n\n})\n\nfunction clickLoginTab() {\n    document.querySelector(\"#login-content\").hidden = false;\n    document.querySelector(\"#register-content\").hidden = true;\n    document.querySelector(\"#profile-content\").hidden = true;\n\n    login.querySelector(\"input\").focus();\n    login.querySelector(\"input\").value;\n}\nfunction clickRegisterTab() {\n    document.querySelector(\"#login-content\").hidden = true;\n    document.querySelector(\"#register-content\").hidden = false;\n    document.querySelector(\"#profile-content\").hidden = true;\n\n    login.querySelector(\"input\").focus();\n    login.querySelector(\"input\").value;\n}\nfunction clickProfileTab() {\n    document.querySelector(\"#login-content\").hidden = true;\n    document.querySelector(\"#register-content\").hidden = true;\n    document.querySelector(\"#profile-content\").hidden = false;\n}\n\ndocument.querySelector(\"#login-tab\").addEventListener(\"click\", clickLoginTab);\ndocument.querySelector(\"#register-tab\").addEventListener(\"click\", clickRegisterTab);\ndocument.querySelector(\"#profile-tab\").addEventListener(\"click\", clickProfileTab);\ndocument.querySelector(\"#log-out\").addEventListener(\"click\", e => {\n    cookies.remove(\"token\");\n    document.location = document.location;\n})\n\nstart();\n\n//# sourceURL=webpack://arlosmod/./client/account/main.js?");

/***/ }),

/***/ "./client/utils.js":
/*!*************************!*\
  !*** ./client/utils.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const cookie = __webpack_require__(/*! js-cookie */ \"./node_modules/js-cookie/dist/js.cookie.js\");\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction getSearchQuery() {\n    let values = {};\n    window.location.search.replace(/\\?/g, \"\").split(\"&\").forEach(elem => {\n        let props = elem.split(\"=\");\n        let key = props.splice(0, 1)[0];\n        let value = props.join(\"=\");\n        values[key] = value;\n    });\n    return values;\n}\n\nfunction mod(a, n) {\n    return ((a % n) + n) % n\n}\nfunction parseTime(timeString) {\n    let date = new Date(timeString);\n\n    let year = date.getFullYear();\n    let month = date.toLocaleString(\"default\", { month: \"short\" });\n    let day = date.getDate();\n    let dayName = date.toLocaleString(\"default\", { weekday: \"short\" });\n    let fullDayName = date.toLocaleString(\"default\", { weekday: \"long\" });\n\n    let hour = mod(date.getHours() - 1, 12) + 1;\n    let minute = date.getMinutes();\n    let ms = date.getTime();\n\n    let meridian = date.getHours() > 11 ? \"PM\" : \"AM\";\n    let humanTime = `${hour}:${(minute + \"\").padStart(2, \"0\")} ${meridian}`\n\n    hour = mod(hour - 1, 12) + 1;\n\n    if (Date.now() - ms < 60000) {\n\n        // Show \"a few seconds ago\" if less than 1 mins ago\n        return \"A few seconds ago\";\n\n    } else if (Date.now() - ms < 3600000) {\n\n        // Show \"x mins ago\" if less than an hour ago\n        return Math.round((Date.now() - ms) / (60000)) + \" mins ago\";\n\n    } else if (Math.floor((Date.now() - 21600000) / 86400000) - Math.floor((ms - 21600000) / 86400000) == 0) {\n\n        // Show \"today at xx:xx XX\" if message was sent today\n        return `Today at ${humanTime}`;\n\n    } else if (Math.floor((Date.now() - 21600000) / 86400000) - Math.floor((ms - 21600000) / 86400000) == 1) {\n\n        // Show \"yesterday at xx:xx XX\" if message was sent yesterday\n        return `Yesterday at ${humanTime}`;\n\n    } else if (Math.floor((Date.now() - 21600000) / 604800000) - Math.floor((ms - 21600000) / 604800000) == 0) {\n\n        // Show \"day at xx:xx XX\" if message was sent in the past week\n        return `${fullDayName} at ${humanTime}`;\n\n    } else {\n\n        // Show \"xx/xx/xxxx at xx:xx XX\" if message was sent over a week ago\n        return `${month}/${day}/${year} at ${humanTime}`\n\n    }\n\n    return `${month} ${day}, ${hour}:${minute} ${meridian}`;\n}\n\nfunction convertDifficultyToString(number) {\n    switch (number) {\n        case 0:\n            return \"Novice\";\n        case 1:\n            return \"Easy\";\n        case 2:\n            return \"Normal\";\n        case 3:\n            return \"Hard\";\n        case 4:\n            return \"Expert\";\n        case 5:\n            return \"Insane\";\n        case 6:\n            return \"Demon\";\n        default:\n            return \"NA\";\n    }\n}\nfunction convertDifficultyToImagePath(number) {\n    switch (number) {\n        case 0:\n            return \"/assets/difficulty-ratings/novice.png\";\n        case 1:\n            return \"/assets/difficulty-ratings/easy.png\";\n        case 2:\n            return \"/assets/difficulty-ratings/normal.png\";\n        case 3:\n            return \"/assets/difficulty-ratings/hard.png\";\n        case 4:\n            return \"/assets/difficulty-ratings/expert.png\";\n        case 5:\n            return \"/assets/difficulty-ratings/insane.png\";\n        case 6:\n            return \"/assets/difficulty-ratings/demon.png\";\n        default:\n            return \"/assets/difficulty-ratings/not-applicable.png\";\n    }\n}\n\nfunction createCustomDropdowns() {\n    let dropdowns = document.querySelectorAll(\".dropdown\");\n\n    [...dropdowns].forEach(el => {\n        let optionsObject = [];\n        let selectedOption = null;\n\n        let options = [...el.querySelectorAll(\"option\")];\n\n        let optionsList = document.createElement(\"div\");\n\n        options.forEach(option => {\n            let el = document.createElement(\"div\");\n            el.innerHTML = option.innerHTML;\n            el.value = option.value;\n            el.name = option.name;\n\n            el.classList.add(\"dropdown-option\");\n            optionsList.appendChild(el);\n\n            const entry = {\n                text: option.innerHTML,\n                value: option.value,\n                name: option.name,\n                element: el\n            };\n            optionsObject.push(entry)\n            option.remove();\n\n            el.addEventListener(\"click\", e => {\n                toggleOpen();\n                selectOption(entry);\n            })\n        })\n\n        el.innerHTML = `<div class=\"selected\"></div>`;\n\n        const selectOption = (option) => {\n            el.querySelector(\".selected\").innerHTML = option.text;\n            selectedOption = option;\n        }\n        const resize = () => {\n            let rect = el.getBoundingClientRect();\n\n            optionsList.style.position = \"absolute\";\n            optionsList.style.left = rect.left + \"px\";\n            optionsList.style.top = rect.bottom + \"px\";\n            optionsList.style.width = (rect.right - rect.left) + \"px\";\n            optionsList.style.overflowX = \"hidden\";\n        }\n        const toggleOpen = () => {\n            resize();\n\n            open = !open;\n            el.dataset.open = open;\n        }\n\n        resize();\n        selectOption(optionsObject[0]);\n\n        optionsList.classList.add(\"options\");\n\n        let open = false;\n        el.querySelector(\".selected\").addEventListener(\"click\", toggleOpen)\n        el.dataset.open = false;\n\n        el.appendChild(optionsList);\n    });\n}\n\nfunction fixIframes() {\n    const f = () => {\n        const iframes = document.querySelectorAll(\"iframe\");\n        [...iframes].forEach(frame => {\n            const size = frame.getBoundingClientRect();\n            frame.width = size.right - size.left;\n            frame.height = size.bottom - size.top;\n        })\n    }\n    window.addEventListener(\"resize\", f);\n    f();\n}\n\nfunction cloneNode(template) {\n    if (typeof template == \"string\") template = document.querySelector(template);\n\n    const el = template.content.cloneNode(true);\n    const a = document.createElement(\"div\");\n    a.appendChild(el);\n    return a.children[0];\n}\n\nfunction stringifyMarkdown(element) {\n\n}\nfunction parseMarkdown(text) {\n    let bold = false;\n    let italic = false;\n    let underlined = false;\n    let boldItalic = false;\n\n    const element = document.createElement(\"div\");\n    let currentBlock = document.createElement(\"span\");\n    let currentText = \"\";\n\n    const finishBlock = () => {\n        if (currentText == \"\") return;\n\n\n        if (bold || boldItalic) currentBlock.classList.add(\"bold\");\n        if (italic || boldItalic) currentBlock.classList.add(\"italic\");\n        if (underlined) currentBlock.classList.add(\"underlined\");\n\n        currentBlock.innerText = currentText;\n        currentText = \"\";\n\n        element.appendChild(currentBlock);\n        currentBlock = document.createElement(\"span\");\n    }\n\n    for (let i = 0; i < text.length; i++) {\n        const currentChar = text[i] ?? \"\";\n        const lastChar = text[i - 1] ?? \"\";\n        const nextChar = text[i + 1] ?? \"\";\n\n        if (lastChar != \"\\\\\") {\n            if (lastChar == \"*\" && currentChar == \"*\" && nextChar == \"*\") {\n                finishBlock();\n                boldItalic = !boldItalic;\n\n                continue;\n            }\n\n            if (lastChar != \"*\" && currentChar == \"*\" && nextChar != \"*\") {\n                finishBlock();\n                italic = !italic;\n\n                continue;\n            }\n\n            if (lastChar != \"*\" && currentChar == \"*\" && nextChar == \"*\") {\n                continue;\n            }\n            if (lastChar == \"*\" && currentChar == \"*\" && nextChar != \"*\") {\n                finishBlock();\n                bold = !bold;\n\n                continue;\n            }\n\n            if (lastChar != \"_\" && currentChar == \"_\" && nextChar != \"_\") {\n                finishBlock();\n                italic = !italic;\n\n                continue;\n            }\n\n            if (lastChar != \"_\" && currentChar == \"_\" && nextChar == \"_\") {\n                continue;\n            }\n            if (lastChar == \"_\" && currentChar == \"_\" && nextChar != \"_\") {\n                finishBlock();\n                underlined = !underlined;\n\n                continue;\n            }\n        }\n\n        currentText += currentChar;\n    }\n\n    finishBlock();\n\n    return element;\n}\n\nasync function getAccountData() {\n    const token = cookie.get(\"token\");\n    if (!token) return;\n\n    const request = await fetch(\"/info?\" + new URLSearchParams({ token }), { method: \"GET\" });\n\n    const data = await request.json();\n\n    if (data.type == \"error\") throw data.message;\n\n    return data.message;\n}\n\n//Automatically executes\n{\n\n    function setupPWA() {\n        if (\"serviceWorker\" in navigator) {\n            navigator.serviceWorker\n                .register(\"/serviceworker.js\")\n                .then(() => { console.log(\"Service Worker Registered\"); });\n        }\n\n\n        let promptElement = document.createElement(\"div\");\n        promptElement.setAttribute(\"id\", \"install-desktop-app\");\n        promptElement.innerHTML = `\n        <h2>Desktop version ready</h2>\n        <button>Install</button>\n        `;\n\n\n        document.body.appendChild(promptElement);\n        promptElement.hidden = true;\n\n        let addBtn = promptElement.querySelector(\"button\");\n\n        window.addEventListener(\"beforeinstallprompt\", (deferredPrompt) => {\n            deferredPrompt.preventDefault();\n\n            promptElement.hidden = false;\n\n            addBtn.addEventListener(\"click\", (e) => {\n                addBtn.style.display = \"none\";\n                deferredPrompt.prompt();\n\n                deferredPrompt.userChoice.then((choiceResult) => {\n                    if (choiceResult.outcome === \"accepted\") {\n                        console.log(\"User accepted the A2HS prompt\");\n                    } else {\n                        console.log(\"User dismissed the A2HS prompt\");\n                    }\n                    deferredPrompt = null;\n                });\n            });\n        });\n    }\n    function setupFadeTransition() {\n\n        document.querySelector(\"#transition-fade\") ?.remove();\n\n\n\n        const cascadeWall = document.createElement(\"div\");\n        cascadeWall.setAttribute(\"id\", \"transition-fade\");\n        document.body.insertBefore(cascadeWall, document.body.children[0]);\n\n        let t2 = Date.now();\n    }\n    function fadeToBlack() {\n        document.querySelector(\"#transition-fade\") ?.classList.add(\"activate\");\n    }\n\n    [...document.querySelectorAll(\"a\")].forEach(el => {\n        el.addEventListener(\"click\", fadeToBlack);\n    })\n\n    setupFadeTransition();\n    if (document.querySelector('link[rel=\"manifest\"]') != null) setupPWA();\n}\n\nmodule.exports = {\n    capitalizeFirstLetter,\n    getSearchQuery,\n    mod,\n    parseTime,\n    convertDifficultyToString,\n    convertDifficultyToImagePath,\n    createCustomDropdowns,\n    fixIframes,\n    cloneNode,\n    parseMarkdown,\n    stringifyMarkdown,\n    getAccountData\n};\n\n//# sourceURL=webpack://arlosmod/./client/utils.js?");

/***/ }),

/***/ "./common/registration-checker.js":
/*!****************************************!*\
  !*** ./common/registration-checker.js ***!
  \****************************************/
/***/ ((module) => {

eval("const emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n\nmodule.exports = function(username, password, passwordConfirm, email) {\n    if (username.length < 4)\n        throw [\"username\", \"Username too short\"];\n    if (username.length > 16)\n        throw [\"username\", \"Username too long\"];\n    if (/[^a-z^A-Z^0-9^_^-]/g.test(username))\n        throw [\"username\", \"Username contains invalid characters\"];\n\n    if (password != passwordConfirm)\n        throw [\"password-confirm\", \"Passwords do not match\"];\n\n    if (password.length < 4)\n        throw [\"password\", \"Password too short\"];\n    if (!/[a-zA-Z]/.test(password))\n        throw [\"password\", \"Password must contain an alphanumeric character\"];\n    if (!(/[0-9]/.test(password) || /[^a-z^A-Z^0-9]/.test(password)))\n        throw [\"password\", \"Password must contain a number or symbol\"];\n\n    if (!emailRegex.test(email))\n        throw [\"email\", \"Email is not valid\"];\n}\n\n//# sourceURL=webpack://arlosmod/./common/registration-checker.js?");

/***/ }),

/***/ "./node_modules/js-cookie/dist/js.cookie.js":
/*!**************************************************!*\
  !*** ./node_modules/js-cookie/dist/js.cookie.js ***!
  \**************************************************/
/***/ (function(module) {

eval("/*! js-cookie v3.0.1 | MIT */\n;\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  /* eslint-disable no-var */\n  function assign (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    }\n    return target\n  }\n  /* eslint-enable no-var */\n\n  /* eslint-disable no-var */\n  var defaultConverter = {\n    read: function (value) {\n      if (value[0] === '\"') {\n        value = value.slice(1, -1);\n      }\n      return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n    },\n    write: function (value) {\n      return encodeURIComponent(value).replace(\n        /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n        decodeURIComponent\n      )\n    }\n  };\n  /* eslint-enable no-var */\n\n  /* eslint-disable no-var */\n\n  function init (converter, defaultAttributes) {\n    function set (key, value, attributes) {\n      if (typeof document === 'undefined') {\n        return\n      }\n\n      attributes = assign({}, defaultAttributes, attributes);\n\n      if (typeof attributes.expires === 'number') {\n        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n      }\n      if (attributes.expires) {\n        attributes.expires = attributes.expires.toUTCString();\n      }\n\n      key = encodeURIComponent(key)\n        .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n        .replace(/[()]/g, escape);\n\n      var stringifiedAttributes = '';\n      for (var attributeName in attributes) {\n        if (!attributes[attributeName]) {\n          continue\n        }\n\n        stringifiedAttributes += '; ' + attributeName;\n\n        if (attributes[attributeName] === true) {\n          continue\n        }\n\n        // Considers RFC 6265 section 5.2:\n        // ...\n        // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n        //     character:\n        // Consume the characters of the unparsed-attributes up to,\n        // not including, the first %x3B (\";\") character.\n        // ...\n        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n      }\n\n      return (document.cookie =\n        key + '=' + converter.write(value, key) + stringifiedAttributes)\n    }\n\n    function get (key) {\n      if (typeof document === 'undefined' || (arguments.length && !key)) {\n        return\n      }\n\n      // To prevent the for loop in the first place assign an empty array\n      // in case there are no cookies at all.\n      var cookies = document.cookie ? document.cookie.split('; ') : [];\n      var jar = {};\n      for (var i = 0; i < cookies.length; i++) {\n        var parts = cookies[i].split('=');\n        var value = parts.slice(1).join('=');\n\n        try {\n          var foundKey = decodeURIComponent(parts[0]);\n          jar[foundKey] = converter.read(value, foundKey);\n\n          if (key === foundKey) {\n            break\n          }\n        } catch (e) {}\n      }\n\n      return key ? jar[key] : jar\n    }\n\n    return Object.create(\n      {\n        set: set,\n        get: get,\n        remove: function (key, attributes) {\n          set(\n            key,\n            '',\n            assign({}, attributes, {\n              expires: -1\n            })\n          );\n        },\n        withAttributes: function (attributes) {\n          return init(this.converter, assign({}, this.attributes, attributes))\n        },\n        withConverter: function (converter) {\n          return init(assign({}, this.converter, converter), this.attributes)\n        }\n      },\n      {\n        attributes: { value: Object.freeze(defaultAttributes) },\n        converter: { value: Object.freeze(converter) }\n      }\n    )\n  }\n\n  var api = init(defaultConverter, { path: '/' });\n  /* eslint-enable no-var */\n\n  return api;\n\n})));\n\n\n//# sourceURL=webpack://arlosmod/./node_modules/js-cookie/dist/js.cookie.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/account/main.js");
/******/ 	
/******/ })()
;
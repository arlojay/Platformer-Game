/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/browse/main.js":
/*!*******************************!*\
  !*** ./client/browse/main.js ***!
  \*******************************/
/***/ (() => {

eval("// Get a list of levels\nasync function getLevelList(sortType) {\n    let response = await fetch(`list?sort=${sortType}`, {\n        method: \"get\",\n    })\n\n    let data = await response.json();\n    return data;\n}\n\nconst plateTemplate = document.querySelector(\"#level-plate-template\");\nlet currentLevel = null;\n\nfunction getSearchQuery() {\n    let values = {};\n    window.location.search.replace(/\\?/g,\"\").split(\"&\").forEach(elem => {\n        let props = elem.split(\"=\");\n        let key = props.splice(0,1)[0];\n        let value = props.join(\"=\");\n        values[key] = value;\n    });\n    return values;\n}\nfunction mod(a,n) {\n    return ((a % n ) + n ) % n\n}\nfunction parseTime(timeString) {\n    let date = new Date(timeString);\n\n    let year = date.getFullYear();\n    let month = date.toLocaleString(\"default\", {month:\"short\"});\n    let day = date.getDate();\n    let dayName = date.toLocaleString(\"default\", {weekday: \"short\"});\n    let fullDayName = date.toLocaleString(\"default\", {weekday: \"long\"});\n\n    let hour = mod(date.getHours() - 1, 12) + 1;\n    let minute = date.getMinutes();\n    let ms = date.getTime();\n\n    let meridian = date.getHours() > 11 ? \"PM\" : \"AM\";\n    let humanTime = `${hour}:${(minute+\"\").padStart(2,\"0\")} ${meridian}`\n\n    hour = mod(hour-1,12)+1;\n\n    if(Date.now() - ms < 60000) {\n        \n        // Show \"a few seconds ago\" if less than 1 mins ago\n        return \"A few seconds ago\";\n\n    } else if(Date.now() - ms < 3600000) {\n\n        // Show \"x mins ago\" if less than an hour ago\n        return Math.round((Date.now() - ms) / (60000)) + \" mins ago\";\n\n    } else if(Math.floor((Date.now()-21600000)/86400000) - Math.floor((ms-21600000)/86400000) == 0) {\n\n        // Show \"today at xx:xx XX\" if message was sent today\n        return `Today at ${humanTime}`;\n\n    } else if(Math.floor((Date.now()-21600000)/86400000) - Math.floor((ms-21600000)/86400000) == 1) {\n\n        // Show \"yesterday at xx:xx XX\" if message was sent yesterday\n        return `Yesterday at ${humanTime}`;\n\n    } else if(Math.floor((Date.now()-21600000)/604800000) - Math.floor((ms-21600000)/604800000) == 0) {\n\n        // Show \"day at xx:xx XX\" if message was sent in the past week\n        return `${fullDayName} at ${humanTime}`;\n\n    } else {\n\n        // Show \"xx/xx/xxxx at xx:xx XX\" if message was sent over a week ago\n        return `${month}/${day}/${year} at ${humanTime}`\n\n    }\n\n    return `${month} ${day}, ${hour}:${minute} ${meridian}`;\n}\n\nfunction convertDifficultyToString(number) {\n    switch(number) {\n        case 0:\n            return \"Novice\";\n        case 1:\n            return \"Easy\";\n        case 2:\n            return \"Normal\";\n        case 3:\n            return \"Hard\";\n        case 4:\n            return \"Expert\";\n        case 5:\n            return \"Insane\";\n        case 6:\n            return \"Demon\";\n        default:\n            return \"NA\";\n    }\n}\nfunction convertDifficultyToImagePath(number) {\n    switch(number) {\n        case 0:\n            return \"/assets/difficulty-ratings/novice.png\";\n        case 1:\n            return \"/assets/difficulty-ratings/easy.png\";\n        case 2:\n            return \"/assets/difficulty-ratings/normal.png\";\n        case 3:\n            return \"/assets/difficulty-ratings/hard.png\";\n        case 4:\n            return \"/assets/difficulty-ratings/expert.png\";\n        case 5:\n            return \"/assets/difficulty-ratings/insane.png\";\n        case 6:\n            return \"/assets/difficulty-ratings/demon.png\";\n        default:\n            return \"/assets/difficulty-ratings/not-applicable.png\";\n    }\n}\n\nfunction selectLevel(level) {\n    const el = document.querySelector(\".selected-level\");\n    el.classList.remove(\"hidden\");\n    \n    el.querySelector(\".desc\").textContent = level.desc;\n    el.querySelector(\".title\").textContent = level.name;\n    el.querySelector(\".date-published\").textContent = parseTime(level.time ?? 0);\n    el.querySelector(\".author\").textContent = level.author.name;\n    el.querySelector(\".author\").href = `/user/${level.author.id}`;\n    el.querySelector(\".likes\").textContent = level.likes ?? 0;\n    el.querySelector(\".difficulty > img\").src = convertDifficultyToImagePath(level.difficulty);\n    el.querySelector(\".difficulty > span\").textContent = convertDifficultyToString(level.difficulty);\n    el.querySelector(\".id\").textContent = level.id;\n    \n    history.pushState(null, null, \"/browse?level=\"+level.id);\n\n    currentLevel = level;\n}\n\nfunction createLevelPlate(level) {\n    const plate = plateTemplate.content.cloneNode(true);\n    level.difficulty ??= -1;\n    \n    plate.querySelector(\".title\").textContent = level.name ?? \"Title\";\n    plate.querySelector(\".author\").textContent = level.author.name ?? \"Author\";\n    plate.querySelector(\".difficulty\").src = convertDifficultyToImagePath(level.difficulty);\n    plate.querySelector(\".likes\").textContent = level.likes ?? 0;\n\n    if(!level.new) plate.querySelector(\".level-entry\").classList.remove(\"new\");\n    if(level.played) plate.querySelector(\".level-entry\").classList.remove(\"unplayed\");\n\n    /*\n        <li>\n            <div class=\"level-entry outset unplayed new\">\n                <img src=\"/assets/difficulty-ratings/easy.png\" class=\"difficulty\" draggable=\"false\">\n                <div class=\"text\">\n                    <div class=\"title\">Test level</div>\n                    <div class=\"stats\">\n                        <div class=\"author\">arlojay</div>\n                        <div class=\"likes error\">-12</div>\n                    </div>\n                </div>\n            </div>\n        </li>\n    */\n\n    return plate;\n}\n\nfunction loadLevels(levels) {\n    let query = getSearchQuery();\n    \n    let list = document.querySelector(\"#level-list\");\n    for(let level of levels) {\n        let el = createLevelPlate(level);\n        list.appendChild(el);\n        \n        let del = list.querySelector(\"#temp\");\n        \n        del.removeAttribute(\"id\");\n        del.addEventListener(\"click\", (e) => {\n            selectLevel(level);\n        })\n\n        // If level id saved in URL\n        if(level.id == query.level) selectLevel(level);\n    }\n}\n\ngetLevelList(\"recent\").then(loadLevels);\n\ndocument.querySelector(\"#play-current-level\").addEventListener(\"click\", (e) => {\n    document.location = \"/play?level=\"+currentLevel.id;\n})\n\n//# sourceURL=webpack://arlosmod/./client/browse/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/browse/main.js"]();
/******/ 	
/******/ })()
;